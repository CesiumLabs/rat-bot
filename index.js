// !! Do not edit this file !!

require("dotenv").config();

const Eris = require("eris");
const crypto = require("crypto");
const util = require("util");
const config = require("./config.json");

/* Actual Client */
if (!process.env.DISCORD_TOKEN) throw new Error("No DISCORD_TOKEN was found!");
const client = new Eris.CommandClient(process.env.DISCORD_TOKEN, null, {
	description: "Snowflake Studio's Helper",
	prefix: ["@mention", config.prefix],
	owner: "Pog Champ",
});

/* Commands */
client.registerCommand(
	"ping",
	async (message, args) => {
		const start = Date.now();
		const msg = await message.channel.createMessage("Pinging...");
		msg.edit(`Pong! \`${Date.now() - start}ms\``);
	},
	{
		description: "Bot's ping",
		aliases: ["pong"],
	}
);

client.registerCommand(
	"eval",
	async (message, args) => {
		try {
			const code = args.join(" ");
			let evaled = eval(code);

			if (typeof evaled !== "string") evaled = util.inspect(evaled);

			message.channel.createMessage({
				embed: {
					title: "Success",
					description: `\`\`\`${clean(evaled).slice(0, 500)}\`\`\``,
				},
			});
		} catch (err) {
			message.channel.createMessage({
				embed: {
					title: "Error",
					description: `\`\`\`${clean(err).slice(0, 500)}\`\`\``,
				},
			});
		}
	},
	{
		description: "Evaluate JS Code",
		aliases: ["ev"],
		requirements: {
			userIDs: config.owners,
		},
		argsRequired: true,
	}
);

/* Events */
client.on("ready", () => {
	console.log("I'm ready!");
	client.editStatus("idle", {
		type: 3,
		name: `Spooky Movies | ${config.prefix}help`,
	});
});

/* Connect to Discord API */
client.connect();

function clean(text) {
	if (typeof text === "string")
		return text
			.replace(/`/g, "`" + String.fromCharCode(8203))
			.replace(/@/g, "@" + String.fromCharCode(8203))
			.replace(
				new RegExp(client.token || "", "g"),
				crypto.randomBytes(40).toString("base64")
			);
	else return text;
}
